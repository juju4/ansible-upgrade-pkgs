---
## FIXME! add support if googlesanta installed and in Lockdown mode... must switch to monitor during upgrade

## FIXME! not supported
# - name: Darwin | macports upgrade
#   macports: name=* present=latest
#   when: ansible_os_family == "Darwin"
- name: Darwin | macports port selfupdate dryrun
  ansible.builtin.command: "/opt/local/bin/port -yv selfupdate --nosync"
  register: darwinmpsu0
  changed_when: false
  ignore_errors: true
  async: 1800
  poll: 180
- name: Debug | var darwinmpsu0
  ansible.builtin.debug:
    var: darwinmpsu0
  when: (verbose is defined and verbose)

- name: Macports update
  when: (darwinmpsu0.stdout.find("MacPorts base is already the latest version") == -1)
  block:
    - name: Google Santa | ensure config set to monitor mode
      community.general.osx_defaults:
        domain: /var/db/santa/config.plist
        key: ClientMode
        value: 0
        type: "{{ harden_darwin_santa_db_type }}"
      when: >
        (harden_darwin_santa_mode == 'LOCKDOWN' or harden_darwin_santa_mode == 2) and
        upgradepkgs_darwin_santa_temporary_monitor

    - name: Darwin | macports port selfupdate
      ansible.builtin.command: "/opt/local/bin/port selfupdate"  # noqa no-changed-when
      register: darwinmpsu
    - name: Debug | var darwinmpsu
      ansible.builtin.debug:
        var: darwinmpsu
      when: (verbose is defined and verbose)
    - name: Set darwin_updated var
      ansible.builtin.set_fact:
        darwin_updated: true
        upgrade_need_hidsupdate: true
  always:
    - name: Google Santa | ensure config set to lockdown mode
      community.general.osx_defaults:
        domain: /var/db/santa/config.plist
        key: ClientMode
        value: "{{ harden_darwin_santa_mode }}"
        type: "{{ harden_darwin_santa_db_type }}"
      when: >
        (harden_darwin_santa_mode == 'LOCKDOWN' or harden_darwin_santa_mode == 2) and
        upgradepkgs_darwin_santa_temporary_monitor

## No option to do a dryrun sync
- name: Darwin | macports sync
  ansible.builtin.command: "/opt/local/bin/port sync"
  failed_when: false
  changed_when: true

- name: Darwin | check for outdated macports
  ansible.builtin.command: "/opt/local/bin/port outdated"
  register: darwinmp
  ignore_errors: true
  changed_when: false
- name: Debug | var darwinmp
  ansible.builtin.debug:
    var: darwinmp
  when: (verbose is defined and verbose)
- name: Macports port outdated
  when: not ("No installed ports are outdated." in darwinmp.stdout)
  block:
    - name: Google Santa | ensure config set to monitor mode
      community.general.osx_defaults:
        domain: /var/db/santa/config.plist
        key: ClientMode
        value: 0
        type: "{{ harden_darwin_santa_db_type }}"
      when: >
        (harden_darwin_santa_mode == 'LOCKDOWN' or harden_darwin_santa_mode == 2) and
        upgradepkgs_darwin_santa_temporary_monitor

    - name: Darwin | macports port outdated upgrade
      ansible.builtin.command: "/opt/local/bin/port upgrade outdated "  # noqa no-changed-when
      register: darwinmp2
    - name: Set darwin_updated var
      ansible.builtin.set_fact:
        darwin_updated: true
        upgrade_need_hidsupdate: true
  always:
    - name: Google Santa | ensure config set to lockdown mode
      community.general.osx_defaults:
        domain: /var/db/santa/config.plist
        key: ClientMode
        value: "{{ harden_darwin_santa_mode }}"
        type: "{{ harden_darwin_santa_db_type }}"
      when: >
        (harden_darwin_santa_mode == 'LOCKDOWN' or harden_darwin_santa_mode == 2) and
        upgradepkgs_darwin_santa_temporary_monitor
## FIXME! need to regenerate hash whitelist for updated ports...

- name: Darwin | check for inactive macports
  ansible.builtin.command: "/opt/local/bin/port installed inactive"
  register: darwinmpi
  ignore_errors: true
  changed_when: false

- name: Debug | var darwinmpi
  ansible.builtin.debug:
    var: darwinmpi
  when: (verbose is defined and verbose)
## FIXME! to still allow rollback, would need an inactive minus 1/n back
- name: Macports ports inactive
  when:
    - darwinmpi.stderr is defined
    - darwinmpi.stderr.find("None of the specified ports are installed.") == -1
    - upgradepkgs_darwinmp_remove_inactive
  block:
    - name: Darwin | macports uninstall inactive
      ansible.builtin.command: "/opt/local/bin/port uninstall inactive"  # noqa no-changed-when
      register: darwinmpi2
      ignore_errors: true
    - name: Set darwin_updated var
      ansible.builtin.set_fact:
        darwin_updated: true
        upgrade_need_hidsupdate: true

## FIXME! port uninstall leaves (~autoremove?)
